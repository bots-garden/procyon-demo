tasks:
  - name: initialize
    before: |

      # ------------------------------------
      # Install Sat (Suborbital)
      # ------------------------------------
      git clone --depth=1 https://github.com/suborbital/sat.git
      cd sat
      go build -o .bin/sat -tags netgo,wasmtime .
      sudo cp .bin/sat /usr/local/bin/sat
      cd ..
      rm -rf sat

      # ------------------------------------
      # Install the Suborbital CLI
      # ------------------------------------
      brew tap suborbital/subo
      brew install subo

      # ------------------------------------
      # Install TinyGo
      # ------------------------------------
      TINYGO_VERSION="0.21.0"
      wget https://github.com/tinygo-org/tinygo/releases/download/v${TINYGO_VERSION}/tinygo_${TINYGO_VERSION}_amd64.deb
      sudo dpkg -i tinygo_${TINYGO_VERSION}_amd64.deb
      rm tinygo_${TINYGO_VERSION}_amd64.deb

      # ------------------------------------
      # Install tools
      # ------------------------------------
      brew install httpie
      brew install hey
      brew install mkcert

    init: |

      RELEASE="0.3.4"
      ARCHITECTURE="amd64"

      # ------------------------------------
      # Install Procyon
      # ------------------------------------

      wget https://github.com/bots-garden/procyon/releases/download/${RELEASE}/procyon-launcher-${RELEASE}-linux-${ARCHITECTURE}.tar.gz
      mkdir procyon-launcher
      tar -zxf procyon-launcher-${RELEASE}-linux-${ARCHITECTURE}.tar.gz --directory procyon-launcher
      
      cd procyon-launcher

      procyon_json="$(cat <<-EOF
      {
        "executors": {
          "satExecutorPath": "/usr/local/bin/sat"
        },  
        "functions": {
          "wasmFilesDirectory": "./functions"
        },
        "http":{
          "start": 3000
        }
      }
      EOF
      )"
      
      echo "${procyon_json}" > procyon-launcher.json
      cd ..

      # ------------------------------------
      # Install Procyon-cli
      # ------------------------------------
      wget https://github.com/bots-garden/procyon/releases/download/${RELEASE}/procyon-cli-${RELEASE}-linux-${ARCHITECTURE}.tar.gz
      mkdir procyon-cli
      tar -zxf procyon-cli-${RELEASE}-linux-${ARCHITECTURE}.tar.gz --directory procyon-cli
      
      cd procyon-cli

      procyon_yaml="$(cat <<-EOF
      # only for use with the Procyon Registry
      procyon-registry:
        url: https://localhost:7070

      # if Procyon Registry:
      # url: https://localhost:7070/get
      # if wapm.io Registry:
      # url: https://registry-cdn.wapm.io/contents
      wasm-registry:
        url: https://localhost:7070/get

      procyon-launcher:
        url: http://localhost:9090
        asdmin-token: ilovepandas

      procyon-reverse:
        url: https://localhost:4443
      EOF
      )"

      echo "${procyon_yaml}" > .procyon-cli.yaml
      
      sudo cp ./procyon-cli /usr/local/bin/procyon-cli
      cp .procyon-cli.yaml $HOME/.procyon-cli

      rm ./procyon-cli

      # you can use alternate config file with the --config flag

      #rm ./.procyon-cli.yaml

      cd ..

      # ------------------------------------
      # Procyon Reverse (reverse proxy)
      # ------------------------------------
      wget https://github.com/bots-garden/procyon/releases/download/${RELEASE}/procyon-reverse-${RELEASE}-linux-${ARCHITECTURE}.tar.gz
      mkdir procyon-reverse
      tar -zxf procyon-reverse-${RELEASE}-linux-${ARCHITECTURE}.tar.gz --directory procyon-reverse

      cd procyon-reverse
      procyon_json="$(cat <<-EOF
      {
        "procyonUrl": "http://localhost:9090",
        "procyonDomain": "http://localhost"
      }
      EOF
      )"
      echo "${procyon_json}" > procyon-reverse.json

      mkdir certs
      cd certs
      mkcert -install
      mkcert procyon-reverse.local localhost 127.0.0.1 ::1
      cp procyon-reverse.local+3-key.pem procyon-reverse.local.key
      cp procyon-reverse.local+3.pem procyon-reverse.local.crt
      rm *.pem

      cd ../..

      # ------------------------------------
      # Procyon Registry 
      # ------------------------------------
      wget https://github.com/bots-garden/procyon/releases/download/${RELEASE}/procyon-registry.zip
      mkdir procyon-registry
      unzip procyon-registry.zip -d ./procyon-registry/
      cd procyon-registry
      npm install

      echo 'PROCYON_REGISTRY_URL="https://localhost:7070"' > procyon-registry.config

      chmod +x procyon-registryctl

      sudo cp ./procyon-registryctl /usr/local/bin/procyon-registryctl
      sudo cp ./procyon-registryctl.config /usr/local/bin/procyon-registryctl.config

      cd certs
      #chmod +x ./generate.sh
      #./generate.sh
      #mkcert -install
      mkcert procyon-registry.local localhost 127.0.0.1 ::1
      cp procyon-registry.local+3-key.pem procyon-registry.local.key
      cp procyon-registry.local+3.pem procyon-registry.local.crt
      rm *.pem

      cd ../..

      rm *.gz
      rm *.zip

      # ------------------------------------
      # üöÄ Ignition
      # ------------------------------------
      echo "üéâ ready to discover Procyon üòÉ"

      gp sync-done ignition # 'ignition' is an arbitrary name

  - name: procyon-launcher
    init: gp sync-await ignition # wait for the above 'init' to finish
    openMode: tab-after
    command: |
      echo "üñêÔ∏è"
      ./start-procyon-launcher.sh

  - name: procyon-reverse
    init: gp sync-await ignition # wait for the above 'init' to finish
    openMode: split-right
    command: |
      echo "üëã"
      ./start-procyon-reverse.sh


  - name: procyon-registry
    init: gp sync-await ignition # wait for the above 'init' to finish
    openMode: split-right
    command: |
      echo "üññ"
      ./start-procyon-registry.sh

  - name: procyon-sandbox
    init: gp sync-await ignition # wait for the above 'init' to finish
    openMode: tab-after
    command: |
      echo "üëã Hello World üåç"

ports:
    # Procyon reverse proxy 
  - port: 8080
    visibility: public
  - port: 4443
    visibility: public
# Procyon
  - port: 9090
    visibility: public

vscode:
  extensions:
    - pkief.material-icon-theme
    - golang.go
    - grain-lang.vscode-grain
    - rust-lang.rust
    - TabNine.tabnine-vscode
